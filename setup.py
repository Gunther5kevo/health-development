#!/usr/bin/env python3
"""
HealthGuide Community Setup Script
This script helps you set up your development environment
"""

import os
import subprocess
import sys
from pathlib import Path

def print_banner():
    print("""
    ╔═══════════════════════════════════════════╗
    ║        HealthGuide Community Setup        ║
    ║           SDG 3: Good Health              ║
    ╚═══════════════════════════════════════════╝
    """)

def check_python_version():
    """Check if Python version is compatible"""
    if sys.version_info < (3, 8):
        print("❌ Python 3.8 or higher is required")
        sys.exit(1)
    print(f"✅ Python {sys.version_info.major}.{sys.version_info.minor} detected")

def create_project_structure():
    """Create the project directory structure"""
    print("\n📁 Creating project structure...")
    
    directories = [
        "frontend",
        "backend",
        "backend/static",
        "backend/templates",
        "uploads",
        "logs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"   ✅ Created {directory}/")

def create_env_file():
    """Create .env file from template"""
    print("\n🔧 Creating environment configuration...")
    
    env_template = """# HealthGuide Community Environment Variables
# Generated by setup script

# Flask Configuration
SECRET_KEY=your-super-secret-key-here-change-this-in-production
FLASK_ENV=development
FLASK_DEBUG=True

# Supabase Configuration
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_KEY=your-supabase-anon-key-here
SUPABASE_SERVICE_KEY=your-supabase-service-role-key-here

# Intrasend Payment Configuration
INTRASEND_TOKEN=your-intrasend-secret-token-here
INTRASEND_PUBLISHABLE_KEY=your-intrasend-publishable-key-here
INTRASEND_TEST_MODE=True

# AI Configuration (Hugging Face)
HF_API_KEY=your-huggingface-api-key-here

# App Configuration
APP_URL=http://localhost:3000
API_URL=http://localhost:5000

# Email Configuration (optional)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# Rate Limiting
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_PER_HOUR=1000
"""
    
    if not os.path.exists('.env'):
        with open('.env', 'w') as f:
            f.write(env_template)
        print("   ✅ Created .env file")
        print("   ⚠️  Please update .env with your actual API keys!")
    else:
        print("   ℹ️  .env file already exists, skipping...")

def create_gitignore():
    """Create .gitignore file"""
    print("\n🚫 Creating .gitignore...")
    
    gitignore_content = """# Environment Variables
.env
.env.local
.env.development
.env.test
.env.production

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
venv/
env/
ENV/
env.bak/
venv.bak/

# Flask
instance/
.webassets-cache

# IDE
.vscode/
.idea/
*.swp
*.swo

# Logs
*.log
logs/

# Database
*.db
*.sqlite
*.sqlite3

# OS
.DS_Store
.DS_Store?
._*
Thumbs.db

# User uploads
uploads/
media/

# Temporary files
*.tmp
*.temp
.cache/
"""
    
    if not os.path.exists('.gitignore'):
        with open('.gitignore', 'w') as f:
            f.write(gitignore_content)
        print("   ✅ Created .gitignore file")
    else:
        print("   ℹ️  .gitignore already exists, skipping...")

def setup_virtual_environment():
    """Set up Python virtual environment"""
    print("\n🐍 Setting up virtual environment...")
    
    if not os.path.exists('venv'):
        try:
            subprocess.run([sys.executable, '-m', 'venv', 'venv'], check=True)
            print("   ✅ Virtual environment created")
        except subprocess.CalledProcessError:
            print("   ❌ Failed to create virtual environment")
            return False
    else:
        print("   ℹ️  Virtual environment already exists")
    
    return True

def install_dependencies():
    """Install Python dependencies"""
    print("\n📦 Installing Python dependencies...")
    
    # Determine the correct pip path
    if os.name == 'nt':  # Windows
        pip_path = os.path.join('venv', 'Scripts', 'pip')
    else:  # Unix/Linux/Mac
        pip_path = os.path.join('venv', 'bin', 'pip')
    
    try:
        # Upgrade pip first
        subprocess.run([pip_path, 'install', '--upgrade', 'pip'], check=True)
        
        # Install requirements
        subprocess.run([pip_path, 'install', '-r', 'backend/requirements.txt'], check=True)
        print("   ✅ Dependencies installed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"   ❌ Failed to install dependencies: {e}")
        return False
    except FileNotFoundError:
        print("   ❌ Virtual environment not found. Please activate it manually.")
        return False

def create_run_scripts():
    """Create convenience scripts to run the application"""
    print("\n📜 Creating run scripts...")
    
    # Windows batch file
    windows_script = """@echo off
echo Starting HealthGuide Community Development Server...
cd backend
call ../venv/Scripts/activate
python app.py
pause
"""
    
    # Unix shell script
    unix_script = """#!/bin/bash
echo "Starting HealthGuide Community Development Server..."
cd backend
source ../venv/bin/activate
python app.py
"""
    
    with open('run_windows.bat', 'w') as f:
        f.write(windows_script)
    print("   ✅ Created run_windows.bat")
    
    with open('run_unix.sh', 'w') as f:
        f.write(unix_script)
    
    # Make Unix script executable
    try:
        os.chmod('run_unix.sh', 0o755)
        print("   ✅ Created run_unix.sh")
    except:
        print("   ⚠️  Created run_unix.sh (you may need to make it executable)")

def print_next_steps():
    """Print next steps for the user"""
    print("""
    ╔══════════════════════════════════════════════════════════════╗
    ║                        🎉 Setup Complete!                    ║
    ╠══════════════════════════════════════════════════════════════╣
    ║                                                              ║
    ║  Next Steps:                                                 ║
    ║                                                              ║
    ║  1. 🔑 Update your .env file with real API keys:            ║
    ║     • Get Supabase keys from: https://supabase.com          ║
    ║     • Get Intrasend keys from: https://intrasend.com        ║
    ║     • Get HuggingFace key from: https://huggingface.co      ║
    ║                                                              ║
    ║  2. 🗄️  Set up your Supabase database:                      ║
    ║     • Create tables: users, modules, user_progress,         ║
    ║       conversations, forum_posts                             ║
    ║                                                              ║
    ║  3. 🚀 Run the application:                                  ║
    ║     • Windows: double-click run_windows.bat                 ║
    ║     • Unix/Mac: ./run_unix.sh                               ║
    ║     • Or manually: cd backend && python app.py              ║
    ║                                                              ║
    ║  4. 🌐 Open your browser to: http://localhost:5000          ║
    ║                                                              ║
    ║  5. 📱 For mobile testing, use your IP:                     ║
    ║     • Find your IP and visit: http://YOUR_IP:5000           ║
    ║                                                              ║
    ╚══════════════════════════════════════════════════════════════╝
    """)

def main():
    """Main setup function"""
    print_banner()
    
    try:
        # Check system requirements
        check_python_version()
        
        # Set up project
        create_project_structure()
        create_env_file()
        create_gitignore()
        
        # Set up Python environment
        if setup_virtual_environment():
            install_dependencies()
        
        # Create convenience scripts
        create_run_scripts()
        
        # Show next steps
        print_next_steps()
        
    except KeyboardInterrupt:
        print("\n\n❌ Setup interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n❌ Setup failed with error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()